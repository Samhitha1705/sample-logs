// Trigger: Poll Git every minute for changes
properties([
    pipelineTriggers([
        pollSCM('* * * * *')
    ])
])

pipeline {
    agent any

    environment {
        SPLUNK_HEC_URL   = 'https://127.0.0.1:8088/services/collector/event'
        SPLUNK_HEC_TOKEN = credentials('3366c860-b822-4ee9-8cfe-398871d88cc5')
        SPLUNK_INDEX     = 'jenkinsgit_logs'
        SN_INSTANCE      = 'https://dev329656.service-now.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sendToSplunk('Code checkout completed')
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'npm install'
                sendToSplunk('Dependencies installed successfully')
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def pkg = readJSON file: 'package.json'
                    if (pkg.scripts?.test) {
                        bat 'npm test'
                        sendToSplunk('Tests executed successfully')
                    } else {
                        echo 'No test script defined in package.json'
                        sendToSplunk('No test script defined')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying...'
                bat """
                    curl -k -X POST "${SPLUNK_HEC_URL}" ^
                      -H "Authorization: Splunk ${SPLUNK_HEC_TOKEN}" ^
                      -H "Content-Type: application/json" ^
                      -d "{\\"event\\":\\"Deployment Started\\",\\"index\\":\\"${SPLUNK_INDEX}\\"}"
                """
                sendToSplunk('Deployment triggered')
            }
        }
    }

    post {
        success {
            withCredentials([usernamePassword(credentialsId: 'servicenow-creds', usernameVariable: 'SN_USER', passwordVariable: 'SN_PASS')]) {
                script {
                    // Create SN incident on success
                    bat """
                        curl -k -w "\\nStatus: %{http_code}\\n" -o response_sn.json -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                          --user "%SN_USER%:%SN_PASS%" ^
                          -H "Content-Type: application/json" ^
                          -d "{\
\\"short_description\\":\\"Jenkins Pipeline Succeeded - Build #${env.BUILD_NUMBER}\\",\
\\"description\\":\\"All stages completed successfully.\\",\
\\"urgency\\":\\"4\\",\
\\"impact\\":\\"4\\"\
}"
                        type response_sn.json
                    """
                    sendToSplunk("ServiceNow incident created for SUCCESS build #${env.BUILD_NUMBER}")
                    
                    // Jenkins email
                    emailext(
                        to: 'Veda@middlewaretalents.com',
                        subject: "âœ… Build #${env.BUILD_NUMBER} Succeeded",
                        body: "<p>Build #${env.BUILD_NUMBER} succeeded. An incident was created in ServiceNow.</p>"
                    )
                }
            }
        }

        failure {
            withCredentials([usernamePassword(credentialsId: 'servicenow-creds', usernameVariable: 'SN_USER', passwordVariable: 'SN_PASS')]) {
                script {
                    // Create SN incident on failure
                    bat """
                        curl -k -w "\\nStatus: %{http_code}\\n" -o response_sn.json -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                          --user "%SN_USER%:%SN_PASS%" ^
                          -H "Content-Type: application/json" ^
                          -d "{\
\\"short_description\\":\\"Jenkins Pipeline Failure - Build #${env.BUILD_NUMBER}\\",\
\\"description\\":\\"Pipeline failed at stage ${env.STAGE_NAME}.\\",\
\\"urgency\\":\\"2\\",\
\\"impact\\":\\"2\\"\
}"
                        type response_sn.json
                    """
                    sendToSplunk("ServiceNow incident created for FAILURE at stage ${env.STAGE_NAME}")
                }
            }
        }

        always {
            cleanWs()
        }
    }
}

// Helper to send a message to Splunk
def sendToSplunk(String message) {
    bat """
        curl -k -X POST "${env.SPLUNK_HEC_URL}" ^
          -H "Authorization: Splunk ${env.SPLUNK_HEC_TOKEN}" ^
          -H "Content-Type: application/json" ^
          -d "{\\"event\\":\\"${message}\\",\\"index\\":\\"${env.SPLUNK_INDEX}\\"}"
    """
}
