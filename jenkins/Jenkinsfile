pipeline {
    agent any

    environment {
        SPLUNK_HEC_URL   = 'https://127.0.0.1:8088/services/collector/event'
        SPLUNK_HEC_TOKEN = credentials('3366c860-b822-4ee9-8cfe-398871d88cc5')
        SPLUNK_INDEX     = 'jenkinsgit_logs'
        SERVICENOW_CREDS = credentials('servicenow-creds')
        SN_INSTANCE      = 'https://dev329656.service-now.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sendToSplunk('Code checkout completed')
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'npm install'
                sendToSplunk('Dependencies installed successfully')
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def pkg = readJSON file: 'package.json'
                    if (pkg.scripts?.test) {
                        bat 'npm test'
                        sendToSplunk('Tests executed successfully')
                    } else {
                        echo 'No test script defined in package.json'
                        sendToSplunk('No test script defined')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying...'
                bat """
                    curl -k -X POST "${SPLUNK_HEC_URL}" ^
                      -H "Authorization: Splunk ${SPLUNK_HEC_TOKEN}" ^
                      -H "Content-Type: application/json" ^
                      -d '{"event":"Deployment Started","index":"${SPLUNK_INDEX}"}'
                """
                sendToSplunk('Deployment triggered')
            }
        }
    }

    post {
        success {
            script {
                // Build payload using single-quoted Groovy string + concatenation
                def snPayload = '{"short_description":"Jenkins Pipeline Succeeded - Build #' + env.BUILD_NUMBER +
                                 '","description":"All stages completed successfully.","urgency":"4","impact":"4","caller_id":"6816f79cc0a8016401c5a33be04be441"}'

                // Call ServiceNow
                def resp = bat(
                    script: """
                        curl -s -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                          --user "${SERVICENOW_CREDS_USR}:${SERVICENOW_CREDS_PSW}" ^
                          -H "Content-Type: application/json" ^
                          -d '${snPayload}'
                    """,
                    returnStdout: true
                ).trim()

                echo ">>> Raw SN response: ${resp}"
                if (resp.startsWith('{')) {
                    def incNumber = readJSON(text: resp).result.number
                    echo "Created SN incident: ${incNumber}"
                } else {
                    error "Invalid JSON from SN: ${resp}"
                }

                sendToSplunk("ServiceNow success incident: ${resp}")

                emailext(
                    to: 'Veda@middlewaretalents.com',
                    subject: "âœ… Build #${env.BUILD_NUMBER} Succeeded",
                    body: "<p>Build #${env.BUILD_NUMBER} succeeded. SN response: ${resp}</p>"
                )
            }
        }

        failure {
            script {
                def snPayload = '{"short_description":"Jenkins Pipeline Failure - Build #' + env.BUILD_NUMBER +
                                 '","description":"Failed at stage ' + env.STAGE_NAME +
                                 '.","urgency":"2","impact":"2","caller_id":"6816f79cc0a8016401c5a33be04be441"}'

                def resp = bat(
                    script: """
                        curl -s -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                          --user "${SERVICENOW_CREDS_USR}:${SERVICENOW_CREDS_PSW}" ^
                          -H "Content-Type: application/json" ^
                          -d '${snPayload}'
                    """,
                    returnStdout: true
                ).trim()

                echo ">>> Raw SN response: ${resp}"
                if (resp.startsWith('{')) {
                    def failInc = readJSON(text: resp).result.number
                    echo "Created failure SN incident: ${failInc}"
                } else {
                    error "Invalid JSON from SN: ${resp}"
                }

                sendToSplunk("ServiceNow failure incident: ${resp}")
            }
        }

        always {
            cleanWs()
        }
    }
}

// Helper to send to Splunk
def sendToSplunk(String message) {
    bat """
        curl -k -X POST "${env.SPLUNK_HEC_URL}" ^
          -H "Authorization: Splunk ${env.SPLUNK_HEC_TOKEN}" ^
          -H "Content-Type: application/json" ^
          -d '{"event":"${message}","index":"${env.SPLUNK_INDEX}"}'
    """
}
