pipeline {
    agent any

    environment {
        SPLUNK_HEC_URL   = 'https://127.0.0.1:8088/services/collector/event'
        SPLUNK_HEC_TOKEN = credentials('3366c860-b822-4ee9-8cfe-398871d88cc5')
        SPLUNK_INDEX     = 'jenkinsgit_logs'
        SERVICENOW_CREDS = credentials('servicenow-creds')
        SN_INSTANCE      = 'https://dev329656.service-now.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sendToSplunk("Code checkout completed")
            }
        }

        stage('Install Dependencies') {
            steps {
                bat "npm install"
                sendToSplunk("Dependencies installed successfully")
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    def pkg = readJSON file: 'package.json'
                    if (pkg.scripts?.test) {
                        bat "npm test"
                        sendToSplunk("Tests executed successfully")
                    } else {
                        echo 'No test script defined in package.json'
                        sendToSplunk("No test script defined")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying..."
                bat """
                    curl -k -X POST "${SPLUNK_HEC_URL}" ^
                    -H "Authorization: Splunk ${SPLUNK_HEC_TOKEN}" ^
                    -H "Content-Type: application/json" ^
                    -d "{\"event\":\"Deployment Started\",\"index\":\"${SPLUNK_INDEX}\"}"
                """
                sendToSplunk("Deployment triggered")
            }
        }
    }

    post {
        success {
            script {
                // Build a one-line JSON payload
                def payload = "{\"short_description\":\"Jenkins Pipeline Succeeded - Build #${env.BUILD_NUMBER}\",\"description\":\"All stages completed successfully.\",\"urgency\":\"4\",\"impact\":\"4\",\"caller_id\":\"6816f79cc0a8016401c5a33be04be441\"}"

                // Send to ServiceNow
                def resp = bat(
                    script: """
                        curl -s -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                        --user "${SERVICENOW_CREDS_USR}:${SERVICENOW_CREDS_PSW}" ^
                        -H "Content-Type: application/json" ^
                        -d "${payload}"
                    """,
                    returnStdout: true
                ).trim()

                // Parse incident number
                def incNumber = readJSON(text: resp).result.number

                // Log to Splunk
                sendToSplunk("ServiceNow incident ${incNumber} created for SUCCESS build #${env.BUILD_NUMBER}")

                // Send Jenkins email
                emailext(
                    to: 'Veda@middlewaretalents.com',
                    subject: "âœ… Build #${env.BUILD_NUMBER} Succeeded (Incident ${incNumber})",
                    body: """
                        <p>Hello Veda,</p>
                        <p>Your Jenkins pipeline <b>#${env.BUILD_NUMBER}</b> completed successfully and created Incident <b>${incNumber}</b> in ServiceNow.</p>
                        <p><a href="${SN_INSTANCE}/nav_to.do?uri=incident.do?sysparm_query=number%3D${incNumber}">View in ServiceNow</a></p>
                    """
                )
            }
        }

        failure {
            script {
                def payload = "{\"short_description\":\"Jenkins Pipeline Failure - Build #${env.BUILD_NUMBER}\",\"description\":\"Pipeline failed at stage '${env.STAGE_NAME}'.\",\"urgency\":\"2\",\"impact\":\"2\",\"caller_id\":\"6816f79cc0a8016401c5a33be04be441\"}"

                def resp = bat(
                    script: """
                        curl -s -X POST "${SN_INSTANCE}/api/now/table/incident" ^
                        --user "${SERVICENOW_CREDS_USR}:${SERVICENOW_CREDS_PSW}" ^
                        -H "Content-Type: application/json" ^
                        -d "${payload}"
                    """,
                    returnStdout: true
                ).trim()

                def failInc = readJSON(text: resp).result.number

                sendToSplunk("ServiceNow incident ${failInc} created for FAILURE at stage: ${env.STAGE_NAME}")
            }
        }

        always {
            cleanWs()
        }
    }
}

// Shared helper
def sendToSplunk(String message) {
    bat """
        curl -k -X POST "${SPLUNK_HEC_URL}" ^
        -H "Authorization: Splunk ${SPLUNK_HEC_TOKEN}" ^
        -H "Content-Type: application/json" ^
        -d "{\"event\":\"${message}\",\"index\":\"${SPLUNK_INDEX}\"}"
    """
}
